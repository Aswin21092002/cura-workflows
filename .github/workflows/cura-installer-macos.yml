name: Macos Installer
run-name: ${{ inputs.cura_conan_version }} for Macos-${{ inputs.architecture }} by @${{ github.actor }}

on:
  workflow_call:
    inputs:
      cura_conan_version:
        description: 'Cura Conan Version'
        default: 'cura/latest@ultimaker/testing'
        required: true
        type: string

      conan_args:
        description: 'Conan args: eq.: --require-override'
        default: ''
        required: false
        type: string

      enterprise:
        description: 'Build Cura as an Enterprise edition'
        default: false
        required: true
        type: boolean

      staging:
        description: 'Use staging API'
        default: false
        required: true
        type: boolean

      architecture:
        description: 'Architecture'
        required: true
        default: 'ARM64'
        type: string

      operating_system:
        description: 'OS'
        required: true
        default: 'self-hosted-ARM64'
        type: string

      private_data:
        required: false
        default: false
        type: boolean

permissions:
  contents: read

env:
  CODESIGN_IDENTITY: ${{ secrets.CODESIGN_IDENTITY }}
  MAC_NOTARIZE_USER: ${{ secrets.MAC_NOTARIZE_USER }}
  MAC_NOTARIZE_PASS: ${{ secrets.MAC_NOTARIZE_PASS }}
  MACOS_CERT_P12: ${{ secrets.MACOS_CERT_P12 }}
  MACOS_CERT_INSTALLER_P12: ${{ secrets.MACOS_CERT_INSTALLER_P12 }}
  MACOS_CERT_USER: ${{ secrets.MACOS_CERT_USER }}
  MACOS_CERT_PASSPHRASE: ${{ secrets.MACOS_CERT_PASSPHRASE }}

jobs:
  cura-installer-create:
    runs-on: ${{ inputs.operating_system }}

    steps:
# FIXME: use main once merged
      - name: Setup the build environment
        uses: ultimaker/cura-workflows/.github/actions/setup-build-environment@CURA-11622_conan_v2
        with:
          conan_user: ${{ secrets.CONAN_USER }}
          conan_password: ${{ secrets.CONAN_PASS }}
          private_data: ${{ inputs.private_data }}
          install_system_dependencies: true
          repository_path: _cura_sources # we don't want the actual sources to interfere with the built conan package

      - name: Remove Macos keychain (Bash)
        run: security delete-keychain signing_temp.keychain || true

      - name: Configure Macos keychain Developer Cert(Bash)
        id: macos-keychain-developer-cert
        uses: apple-actions/import-codesign-certs@v1
        with:
          keychain-password: ${{ secrets.MACOS_KEYCHAIN_PASSWORD }}
          p12-file-base64: ${{ secrets.MACOS_CERT_P12 }}
          p12-password: ${{ secrets.MACOS_CERT_PASSPHRASE }}

      - name: Configure Macos keychain Installer Cert (Bash)
        id: macos-keychain-installer-cert
        uses: apple-actions/import-codesign-certs@v1
        with:
          keychain-password: ${{ secrets.MACOS_KEYCHAIN_PASSWORD }}
          create-keychain: false # keychain is created in previous use of action.
          p12-file-base64: ${{ secrets.MACOS_CERT_INSTALLER_P12 }}
          p12-password: ${{ secrets.MACOS_CERT_PASSPHRASE }}

      - name: Gather/build the packages
        run: conan install --requires "${{ inputs.cura_conan_version }}" ${{ inputs.conan_args }} --build=missing --update -of cura_inst --deployer-package="*" --profile installer.jinja -c user.sentry:token="${{ secrets.CURAENGINE_SENTRY_TOKEN }}" ${{ inputs.enterprise && '-o "cura/*:enterprise=True"' || '' }} ${{ inputs.staging && '-o "cura/*:staging=True"' || '' }} ${{ inputs.private_data && '-o "cura/*:internal=True"' || '' }}

      - name: Unlock Macos keychain (Bash)
        run: security unlock -p $TEMP_KEYCHAIN_PASSWORD signing_temp.keychain
        env:
          TEMP_KEYCHAIN_PASSWORD: ${{  steps.macos-keychain-developer-cert.outputs.keychain-password }}

      - name: Create the Cura distribution with pyinstaller
        id: prepare-distribution
        run: |
          source cura_inst/conanrun.sh
          python -m venv cura_installer_venv
          source cura_installer_venv/bin/activate
          ls cura_inst/packaging/pip_requirements_{core,installer}_*.txt | xargs -I {} pip install -r {}

          CURA_VERSION_FULL=`python -c "from cura.CuraVersion import CuraVersionFull; print(CuraVersionFull)"`
          echo "CURA_VERSION_FULL=$CURA_VERSION_FULL" >> $GITHUB_OUTPUT

          CURA_APP_NAME=`python -c "from cura.CuraVersion import CuraAppDisplayName; print(CuraAppDisplayName)"`
          echo "CURA_APP_NAME=$CURA_APP_NAME" >> $GITHUB_OUTPUT

          INSTALLER_FILENAME=`python Cura-workflows/runner_scripts/cura_installer_filename.py --os ${{ runner.os }} --architecture ${{ inputs.architecture }} ${{ inputs.enterprise && '--enterprise' || '' }} ${{ inputs.private_data && '--internal' || '' }}`
          echo "INSTALLER_FILENAME=$INSTALLER_FILENAME" >> $GITHUB_OUTPUT

          python Cura-workflows/runner_scripts/summarize_used_dependencies.py --installer_filename $INSTALLER_FILENAME >> $GITHUB_STEP_SUMMARY

          pyinstaller ./cura_inst/UltiMaker-Cura.spec

      - name: Create the Macos dmg (Bash)
        run: python ../cura_inst/packaging/MacOS/build_macos.py --source_path ../cura_inst --dist_path . --cura_conan_version ${{ inputs.$CURA_CONAN_VERSION }} --filename "${{ steps.prepare-distribution.outputs.INSTALLER_FILENAME }}" --build_dmg --build_pkg --app_name "${{ steps.prepare-distribution.outputs.CURA_APP_NAME }}"
        working-directory: dist

      - name: Upload the dmg
        uses: actions/upload-artifact@v4.3.3
        with:
          name: ${{ steps.filename.outputs.INSTALLER_FILENAME }}-dmg
          path: |
            dist/${{ steps.filename.outputs.INSTALLER_FILENAME }}.dmg
          retention-days: 5

      - name: Upload the pkg
        uses: actions/upload-artifact@v4.3.3
        with:
          name: ${{ steps.filename.outputs.INSTALLER_FILENAME }}-pkg
          path: |
            dist/${{ steps.filename.outputs.INSTALLER_FILENAME }}.pkg
          retention-days: 5

# FIXME: Use main once merged
      - name: Upload the built Package(s)
        if: ${{ always() && ! inputs.private_data }}
        uses: ultimaker/cura-workflows/.github/actions/upload-conan-package@CURA-11622_conan_v2
        with:
          package_name: '*'

      - name: Clean local cache
        if: ${{ always() && startsWith(inputs.operating_system, 'self-hosted') }}
        run: conan remove '*' --lru=1w -c
