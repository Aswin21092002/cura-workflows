name: Windows Installer
run-name: ${{ inputs.cura_conan_version }} for Windows-X64 by @${{ github.actor }}

on:
  workflow_call:
    inputs:
      cura_conan_version:
        description: 'Cura Conan Version'
        default: 'cura/latest@ultimaker/testing'
        required: true
        type: string

      conan_args:
        description: 'Conan args: eq.: --requires'
        default: ''
        required: false
        type: string

      enterprise:
        description: 'Build Cura as an Enterprise edition'
        default: false
        required: true
        type: boolean

      staging:
        description: 'Use staging API'
        default: false
        required: true
        type: boolean

      operating_system:
        description: 'OS'
        required: true
        default: 'windows-2022'
        type: string

      private-data:
        required: false
        default: false
        type: boolean

permissions:
  contents: read

env:
  WIN_CERT_INSTALLER_CER: ${{ secrets.WIN_CERT_INSTALLER_CER }}
  WIN_CERT_INSTALLER_CER_PASS: ${{ secrets.WIN_CERT_INSTALLER_CER_PASS }}
  SENTRY_TOKEN: ${{ secrets.CURAENGINE_SENTRY_TOKEN }}
  # win-cert-installer is probably not nescesary at all: went out the moment we started using signkey again on our own runner
  # sentry debug symbols seem to only be uploaded for linux?

jobs:
  cura-installer-create:
    runs-on: ${{ inputs.operating_system }}

    steps:
# FIXME: use main once merged
      #- name: Setup the build environment
      #  uses: ultimaker/cura-workflows/.github/actions/setup-build-environment@CURA-11622_conan_v2
      #  with:
      #    conan_user: ${{ secrets.CONAN_USER }}
      #    conan_password: ${{ secrets.CONAN_PASS }}
      #    private_data: ${{ inputs.private_data }}
      #    install_system_dependencies: true

      - name: Checkout Cura-workflows repo
        uses: actions/checkout@v4
        with:
          repository: Ultimaker/Cura-workflows
# FIXME: use main once merged
          ref: CURA-11622_conan_v2
          path: Cura-workflows

      - name: Setup Python and pip
        uses: actions/setup-python@v5
        with:
          python-version: '3.12.1'

      - name: Install Python requirements and setup Conan environment (Powershell)
# FIXME: use main once merged
        if: ${{ runner.os }} == 'Windows'
        shell: powershell
        run: |
          python -m pip install -r Cura-workflows/.github/workflows/requirements-runner.txt
          conan profile detect -f
          conan config install https://github.com/Ultimaker/conan-config.git -a "-b CURA-11622_conan_v2"
          if ( '${{ secrets.CONAN_USER }}' -ine '' -and '${{ secrets.CONAN_PASS }}' -ine '' )
          {
            conan remote login cura-conan2 ${{ secrets.CONAN_USER }} -p ${{ secrets.CONAN_PASS }}
          }
          if ( '${{ inputs.private_data }}' -ieq 'true' )
          {
            conan remote enable cura-private-conan2
            if ( '${{ secrets.CONAN_USER }}' -ine '' -and '${{ secrets.CONAN_PASS }}' -ine '' )
            {
              conan remote login cura-private-conan2 ${{ secrets.CONAN_USER }} -p ${{ secrets.CONAN_PASS }}
            }
          }

      #- name: Add runner credentials to cura remote
      #  run: conan user -p ${{ secrets.CONAN_PASS }} -r cura ${{ secrets.CONAN_USER }}

      #- name: Add Cura private Artifactory remote
      #  if: ${{ inputs.conan_internal }}
      #  run: |
      #    conan config install https://github.com/Ultimaker/conan-config.git -a "-b runner/internal"
      #    conan user -p ${{ secrets.CONAN_PASS }} -r cura-private ${{ secrets.CONAN_USER }}

      - name: Gather/build the packages
        run: conan install --requires ${{ inputs.cura_conan_version }} ${{ inputs.conan_args }} --build=missing --update -of cura_inst -o "cura/*:pyinstaller=True" --deployer-package="*" -g GitHubActionsBuildEnv -g GitHubActionsRunEnv -g VirtualPythonEnv ${{ inputs.enterprise && '-o "&:enterprise=True"' || '' }} ${{ inputs.staging && '-o "&:staging=True"' || '' }} ${{ inputs.private_data && '-o "&:internal=True"' || '' }} -c tools.build:skip_test=True -s curaengine:build_type=RelWithDebInfo -s arcus:build_type=RelWithDebInfo -s clipper:build_type=RelWithDebInfo

      #- name: Set Environment variables for Cura (Powershell)
      #  run: |
      #    echo "${Env:WIX}\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
      #    .\cura_inst\Scripts\activate_github_actions_buildenv.ps1
      #    .\cura_inst\venv\Scripts\activate_github_actions_version_env.ps1

      - name: Create the Cura dist
        run: pyinstaller ./cura_inst/UltiMaker-Cura.spec

      - name: Output the name file name and extension
        id: filename
        run: python Cura-workflows/runner_scripts/cura_installer_filename.py --os ${{ runner.os }} --arch X64 --version "$Env:CURA_VERSION_FULL" ${{ inputs.enterprise && '--enterprise' || '' }} ${{ inputs.private_data && '--internal' || '' }}

      - name: Summarize the used dependencies
        run: python Cura-workflows/runner_scripts/summarize_used_dependencies.py --installer_filename ${{ steps.filename.outputs.INSTALLER_FILENAME }}

      - name: Create the Windows msi installer (Powershell)
        run: |
          python ..\cura_inst\packaging\msi\create_windows_msi.py ..\cura_inst .\UltiMaker-Cura "${{steps.filename.outputs.INSTALLER_FILENAME }}.msi" "$Env:CURA_APP_NAME"
        working-directory: dist

      - name: Sign the Windows msi installer (Powershell)
        run: |
          & signtool sign /v /fd sha256 /tr http://timestamp.sectigo.com /td sha256 /f C:\actions-runner\code_sign.cer /csp "eToken Base Cryptographic Provider" /kc ${{ secrets.WIN_TOKEN_CONTAINER }} "${{steps.filename.outputs.INSTALLER_FILENAME }}.msi"
        working-directory: dist
        timeout-minutes: 2

      - name: Create the Windows exe installer (Powershell)
        if: ${{ always() }}
        run: |
          python ..\cura_inst\packaging\NSIS\create_windows_installer.py ../cura_inst . "${{steps.filename.outputs.INSTALLER_FILENAME }}.exe"
        working-directory: dist

      - name: Sign the Windows exe installer (Powershell)
        if: ${{ always() }}
        run: |
          & signtool sign /v /fd sha256 /tr http://timestamp.sectigo.com /td sha256 /f C:\actions-runner\code_sign.cer /csp "eToken Base Cryptographic Provider" /kc ${{ secrets.WIN_TOKEN_CONTAINER }} "${{steps.filename.outputs.INSTALLER_FILENAME }}.exe"
        working-directory: dist
        timeout-minutes: 2

      #- name: Upload the built Package(s)
      #  if: ${{ always() && ! inputs.conan_internal }}
      #  uses: ultimaker/cura-workflows/.github/actions/upload-conan-package@CURA-11622_conan_v2
      #  with:
      #    package_name: '*'

      - name: Clean local cache
        if: ${{ always() && startsWith(inputs.operating_system, 'self-hosted') }}
        run: conan remove '*' --lru=1w -c

      - name: Upload the installer msi
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{steps.filename.outputs.INSTALLER_FILENAME }}-msi
          path: dist/${{steps.filename.outputs.INSTALLER_FILENAME }}.msi
          retention-days: 5

      - name: Upload the installer exe
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{steps.filename.outputs.INSTALLER_FILENAME }}-exe
          path: dist/${{steps.filename.outputs.INSTALLER_FILENAME }}.exe
          retention-days: 5

      - name: Upload the application exe
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: UltiMaker-Cura.exe
          path: dist/UltiMaker-Cura/UltiMaker-Cura.exe
          retention-days: 5

      - name: Upload the engine exe
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: CuraEngine.exe
          path: dist/UltiMaker-Cura/CuraEngine.exe
          retention-days: 5

      # NOTE: The extension is .sh, since this isn't going to build-environment, so not on the Win build image.
      - name: Write the run info
        if: ${{ always() }}
        shell: python
        run: |
          import os
          with open("run_info.sh", "w") as f:
              f.writelines(f'echo "CURA_VERSION_FULL={os.environ["CURA_VERSION_FULL"]}" >> $GITHUB_ENV\n')

      # NOTE: The extension is .sh, since this isn't going to build-environment, so not on the Win build image.
      - name: Upload the run info
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: windows-run-info
          path: run_info.sh
          retention-days: 5
